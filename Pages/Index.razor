@page "/index.html"
@using System.Text.Json
@using FantasyFootballMatchupAnalyzer.Classes.Helpers
@using Newtonsoft.Json
@using UserInfo
@inherits IndexPage

@code {
    private UserInfoModel userInfoModel;
    private string usernameInput = "";
    private List<FantasyFootballLeague> userLeagues = new();

    private ErrorModal errorModal;   
}

<ErrorModal @ref="errorModal" />

<h1>Fantasy Football Matchup Analyzer</h1>

<h2>Get your Sleeper Leagues:</h2>

<form id="userDataForm" method="get">
    <label for="usernameInput">Username:</label>
    <input id="usernameInputField" type="text" name="usernameInput" @bind=usernameInput />
    <button type="button" @onclick="RequestUserData">Get User Data</button>
</form>



@if (!string.IsNullOrEmpty(usernameInput) && userInfoModel != null)
{
    @if (userLeagues == null || userLeagues.Count == 0)
    {
        <p>COULD NOT FIND LEAGUE DATA</p>
        return;
    }

    <h3>@(userInfoModel.DisplayName)'s Leagues</h3>

    @foreach (var league in userLeagues)
    {
        string pointsPerReceptionType = @league.ScoringSettings.Reception == 1.0
            ? "PPR"
            : @league.ScoringSettings.Reception == 0.5
                ? "Half-PPR"
                : "Zero-PPR";

        <div>
            <img src=@league.ImageDisplayLink alt="League Avatar" />
            <h4>@league.Name</h4>
            <h5>@league.TotalRosters Team @pointsPerReceptionType League</h5>
            <button type="submit" a=>Check out this roster</button>
        </div>
    }
}

@code {
    private async Task RequestUserData()
    {
        if (userInfoModel != null && usernameInput.ToLower() == userInfoModel.Username)
        {
            return;
        }

        try
        {
            userInfoModel = await RequestDataHelper.RequestData<UserInfoModel>(ApiCalls.SleeperUserApiUri + usernameInput);
            userLeagues = await RequestDataHelper.RequestData<List<FantasyFootballLeague>>(
                ApiCalls.SleeperUserCurrentYearLeaguesApiUri(userInfoModel.UserId)
            );
        }
        catch (HttpRequestException e)
        {
            errorModal.ShowError($"Error({e.StatusCode}): {e.Message}");
        }
        catch (Exception e)
        {
            errorModal.ShowError($"Error({e.Message}");
        }
    }
} 