@page "/index.html"
@using System.Text.Json
@using FantasyFootballMatchupAnalyzer.Classes.Helpers
@using Newtonsoft.Json
@using UserInfo
@inherits IndexPage

@code {
    private UserInfoModel userInfoModel;
    private List<FantasyFootballLeague> userLeagues = new();
    private FormModel formModel = new();
    private ErrorModal errorModal;
}

<ErrorModal @ref="errorModal" />

<h1>Fantasy Football Matchup Analyzer</h1>

<h2>Get your Sleeper Leagues:</h2>

<EditForm Model="@formModel" OnSubmit="RequestUserData">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset>
        <legend>Find Your Leagues</legend>
        <div>
            <label>Username:</label>
            <InputText @bind-Value="formModel.Username" />
        </div>
        <button type="submit">Submit</button>
    </fieldset>
</EditForm>

@if (userInfoModel != null)
{
    @if (userLeagues == null || userLeagues.Count == 0)
    {
        <p>NO LEAGUE DATA FOUND</p>
        return;
    }

    <h3>@(userInfoModel.DisplayName)'s Leagues</h3>

    @foreach (var league in userLeagues)
    {
        string pointsPerReceptionType = @league.ScoringSettings.Reception == 1.0
            ? "PPR"
            : @league.ScoringSettings.Reception == 0.5
                ? "Half-PPR"
                : "Zero-PPR";

        <form action="roster.html" method="get">
            <fieldset>
                @* <legend>@league.Name</legend> *@
                <img src=@league.ImageDisplayLink alt="League Avatar" />
                <h4>@league.Name</h4>
                <h5>@league.TotalRosters Team @pointsPerReceptionType League</h5>
                <button type="submit">Check out your roster</button>
            </fieldset>
        </form>

        @* <div>
            <img src=@league.ImageDisplayLink alt="League Avatar" />
            <h4>@league.Name</h4>
            <h5>@league.TotalRosters Team @pointsPerReceptionType League</h5>
            <button class="btn btn-primary" type="submit">Check out this roster</button>
        </div> *@
    }
}

@code {
    private class FormModel
    {
        public string Username { get; set; }
    }

    private async Task RequestUserData()
    {
        if (string.IsNullOrEmpty(formModel.Username))
        {
            return;
        }

        try
        {
            userInfoModel = await RequestDataHelper.RequestData<UserInfoModel>(ApiCalls.SleeperUserApiUri + formModel.Username);
            userLeagues = await RequestDataHelper.RequestData<List<FantasyFootballLeague>>(
                ApiCalls.SleeperUserCurrentYearLeaguesApiUri(userInfoModel.UserId)
            );
        }
        catch (HttpRequestException e)
        {
            errorModal.ShowError($"Error({e.StatusCode}): {e.Message}");
        }
        catch (Exception e)
        {
            errorModal.ShowError($"Error({e.Message}");
        }
    }
} 